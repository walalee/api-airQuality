const socket = io("ws://localhost:5084"); // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ IP ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏Ñ‡∏ô‡∏•‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WebSocket ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
socket.on("connect", () => {
    console.log("‚úÖ WebSocket connected to backend");
});

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö + log ‡∏ó‡∏µ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤
function updateSensorUI(data) {
    const { 
        TempC, Hum, Windspeed, pm2_5, pm10, pm1_0, CO, O3, NO2, SO2, timestamp 
    } = data;

    console.log("üì° ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà:");
    console.log("üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ (TempC):", TempC);
    console.log("üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô (Hum):", Hum);
    console.log("üí® ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏•‡∏° (Windspeed):", Windspeed);
    console.log("üå´Ô∏è PM2.5:", pm2_5);
    console.log("üå´Ô∏è PM10:", pm10);
    console.log("üå´Ô∏è PM1.0:", pm1_0);
    console.log("üå¨Ô∏è CO:", CO);
    console.log("üå¨Ô∏è O3:", O3);
    console.log("üå¨Ô∏è NO2:", NO2);
    console.log("üå¨Ô∏è SO2:", SO2);
    console.log("‚è∞ Timestamp:", new Date(timestamp));

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    document.getElementById("temperature").textContent = `${TempC ?? "--"}¬∞`;
    document.getElementById("humidity").textContent = Hum ?? "--";
    document.getElementById("windSpeed").textContent = Windspeed ?? "--";
    document.getElementById("pm2.5").textContent = pm2_5 ?? "--";
    document.getElementById("pm10").textContent = pm10 ?? "--";
    // document.getElementById("pm1_0").textContent = pm1_0 ?? "--";
    document.getElementById("CO").textContent = CO ?? "--";
    document.getElementById("O3").textContent = O3 ?? "--";
    document.getElementById("NO2").textContent = NO2 ?? "--";
    document.getElementById("SO2").textContent = SO2 ?? "--";

    // ‡πÄ‡∏ß‡∏•‡∏≤ (‡πÇ‡∏ä‡∏ß‡πå‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const now = new Date();
    document.getElementById("time").textContent = now.toLocaleString("th-TH", {
        dateStyle: "medium",
        timeStyle: "short",
    });
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API ‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤
fetch("ws://localhost:5084/latest")
    .then((res) => res.json())
    .then((data) => {
        console.log("üì¶ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
        updateSensorUI(data);
    })
    .catch((err) => console.error("‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err));

// ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å WebSocket
socket.on("newSensorData", (data) => {
    updateSensorUI(data);
});

document.addEventListener("DOMContentLoaded", function () {
    let weatherData = null;

    const weekTab = document.getElementById("week-tab");
    const todayTab = document.getElementById("today-tab");
    const forecastContainer = document.getElementById("forecast-container");

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥
    function getWeatherStatusEmoji(status) {
        switch (status.toLowerCase()) {
            case 'clear':
                return '‚òÄÔ∏è'; // Sunny
            case 'cloudy':
                return '‚òÅÔ∏è'; // Cloudy
            case 'rainy':
                return 'üåßÔ∏è'; // Rainy
            case 'stormy':
                return '‚õàÔ∏è'; // Stormy
            case 'snowy':
                return '‚ùÑÔ∏è'; // Snowy
            case 'foggy':
                return 'üå´Ô∏è'; // Foggy
            default:
                return 'üå•Ô∏è'; // Default (partly cloudy)
        }
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏õ‡∏•‡∏á PM2.5 ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    function getPollutionStatusColor(pm25) {
        if (pm25 <= 25) return "#75c095";   // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        if (pm25 <= 50) return "#ffdd63";   // ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        return "#ff2d2b";                   // ‡πÅ‡∏î‡∏á
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    function updateMainInfo() {
        document.getElementById("temperature").textContent = `${weatherData.temperature}¬∞C`;
        document.getElementById("humidity").textContent = `${weatherData.humidity}`;
        document.getElementById("windSpeed").textContent = `${weatherData.windSpeed}`;
    }

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏Å‡∏£‡∏ì‡πå
    function renderForecast(dayIndex = null) {
        if (!weatherData || !weatherData.forecast) {
            console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• forecast");
            return; // ‡∏≠‡∏≠‡∏Å‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• forecast
        }
    
        forecastContainer.innerHTML = "";
    
        if (dayIndex !== null) {
            const day = weatherData.forecast[dayIndex % 7];
            const div = document.createElement("div");
            div.classList.add("forecast-card");
            const statusEmoji = getWeatherStatusEmoji(day.status);
            const statusColor = getPollutionStatusColor(day.highlights["PM2.5"]);
            div.innerHTML = `<p>${day.day}</p><div style="font-size: 40px;">${statusEmoji}</div><p>${day.temp}¬∞</p>
                             <div class="pollution-status" style="background-color: ${statusColor}; width: 10px; height: 10px; border-radius: 50%;"></div>`;
            forecastContainer.appendChild(div);
            updateHighlights(day.highlights); // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï highlights ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
        } else {
            weatherData.forecast.forEach((day, index) => {
                const div = document.createElement("div");
                div.classList.add("forecast-card");
                const statusEmoji = getWeatherStatusEmoji(day.status);
                const statusColor = getPollutionStatusColor(day.highlights["PM2.5"]);
                div.innerHTML = `<p>${day.day}</p><div style="font-size: 30px;">${statusEmoji}</div><p>${day.temp}¬∞</p>
                                 <div class="pollution-status" style="background-color: ${statusColor}; width: 10px; height: 10px; border-radius: 50%;"></div>`;
    
                div.addEventListener("click", function () {
                    updateHighlights(weatherData.forecast[index].highlights);
                });
    
                forecastContainer.appendChild(div);
            });
            updateHighlights(weatherData.forecast[2].highlights);
        }
    }
    

    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Highlights
function updateHighlights(highlights) {
    const highlightsContainer = document.getElementById("highlights-container");
    highlightsContainer.innerHTML = ""; // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô

    if (highlights) {
        console.log("üìä ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• highlights:", highlights);
        
        Object.entries(highlights).forEach(([key, value]) => {
            const div = document.createElement("div");
            div.classList.add("highlight-card");
            div.innerHTML = `<p>${key}</p><h4>${value} ¬µg/m¬≥</h4>`;
            highlightsContainer.appendChild(div);
        });
    } else {
        console.log("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• highlights");
    }
}


    // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏ß‡∏•‡∏≤
    function updateTime() {
        const now = new Date();
        const weekday = now.toLocaleString("en-GB", { weekday: "long" });
        const time = now.toLocaleString("en-GB", { hour: "2-digit", minute: "2-digit" });
        document.getElementById("time").textContent = `${weekday}, ${time}`;
    }

    setInterval(updateTime, 1000);
    updateTime();

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö WebSocket
    const socket = io("ws://localhost:5084");

    // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å server
    socket.on("weather", function (data) {
        weatherData = data;
        updateMainInfo();
        renderForecast();
    });

    // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏ó‡πá‡∏ö
    weekTab.addEventListener("click", function () {
        if (!weatherData) return;
        weekTab.classList.add("active");
        todayTab.classList.remove("active");
        renderForecast();
    });

    todayTab.addEventListener("click", function () {
        if (!weatherData) return;
        todayTab.classList.add("active");
        weekTab.classList.remove("active");
        renderForecast(new Date().getDay());
    });
});
