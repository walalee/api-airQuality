require('dotenv').config();
const axios = require('axios');
const mongoose = require('mongoose');
const AirPollution = require('./airPollution');

const API_KEY = process.env.OPENWEATHER_API_KEY;
const MONGO_URI = process.env.MONGO_URI;

const LAT = 13.87;
const LON = 100.6;

// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const dates = [

  "2025-02-27",
  "2025-02-28"

];

(async () => {
  try {
    await mongoose.connect(MONGO_URI);
    console.log("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Air Pollution ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");

    for (const date of dates) {
      const startOfDay = new Date(`${date}T00:00:00Z`).getTime();
      const endOfDay = new Date(`${date}T23:59:59Z`).getTime();

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏à‡∏≤‡∏Å 00:00 ‡∏ñ‡∏∂‡∏á 23:00
      for (let hour = 0; hour < 24; hour++) {
        const startTimestamp = startOfDay + (hour * 60 * 60 * 1000); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
        const endTimestamp = startTimestamp + (60 * 60 * 1000); // ‡πÄ‡∏û‡∏¥‡πà‡∏° 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ end

        const url = `http://api.openweathermap.org/data/2.5/air_pollution/history?lat=${LAT}&lon=${LON}&start=${Math.floor(startTimestamp / 1000)}&end=${Math.floor(endTimestamp / 1000)}&appid=${API_KEY}`;

        try {
          const response = await axios.get(url);
          const data = response.data.list;

          if (data.length === 0) {
            console.warn(`‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${date} ‡πÄ‡∏ß‡∏•‡∏≤ ${hour}:00`);
            continue;
          }

          for (const pollution of data) {
            const pollutionData = new AirPollution({
              dateTime: new Date(pollution.dt * 1000),
              pm2_5: pollution.components.pm2_5,
              pm10: pollution.components.pm10,
              co: pollution.components.co,
              no2: pollution.components.no2,
              so2: pollution.components.so2,
              o3: pollution.components.o3,
            });

            await pollutionData.save();
            console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡πÄ‡∏ß‡∏•‡∏≤ ${pollutionData.dateTime.toISOString()} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
          }

        } catch (err) {
          console.error(`‚ùå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å OpenWeather ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${err.message}`);
        }
      }
    }

    console.log("üéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏•‡∏û‡∏¥‡∏©‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤");
    process.exit(0);

  } catch (err) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏° MongoDB:", err.message);
  }
})();
